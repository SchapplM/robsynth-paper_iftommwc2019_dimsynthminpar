% Calculate minimal parameter regressor of inverse dynamics joint torque vector for
% kuka6dof
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[L1,L2,L3,L4,L5,L6]';
% 
% Output:
% tau_reg [6x38]
%   minimal parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox (ehem. IRT-Maple-Toolbox)
% Datum: 2018-08-07 17:57
% Revision: 4fc915f170f947983f72d2b29299dd86a0cf3511
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für mechatronische Systeme, Universität Hannover

function tau_reg = kuka6dof_invdynJ_fixb_regmin_slag_vp(qJ, qJD, qJDD, g, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(6,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'kuka6dof_invdynJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'kuka6dof_invdynJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'kuka6dof_invdynJ_fixb_regmin_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'kuka6dof_invdynJ_fixb_regmin_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'kuka6dof_invdynJ_fixb_regmin_slag_vp: pkin has to be [6x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2018-08-07 17:53:31
% EndTime: 2018-08-07 17:53:55
% DurationCPUTime: 10.08s
% Computational Cost: add. (11969->613), mult. (25987->880), div. (0->0), fcn. (21060->14), ass. (0->303)
t226 = sin(qJ(3));
t232 = cos(qJ(2));
t409 = cos(qJ(3));
t325 = t409 * t232;
t293 = qJD(1) * t325;
t227 = sin(qJ(2));
t355 = qJD(1) * t227;
t170 = -t226 * t355 + t293;
t176 = t226 * t232 + t227 * t409;
t171 = t176 * qJD(1);
t224 = sin(qJ(5));
t230 = cos(qJ(5));
t231 = cos(qJ(4));
t359 = t230 * t231;
t114 = -t170 * t224 - t171 * t359;
t225 = sin(qJ(4));
t349 = qJD(5) * t224;
t320 = t225 * t349;
t430 = -t114 - t320;
t422 = qJD(4) + t171;
t337 = qJD(2) + qJD(3);
t206 = t231 * t337;
t136 = t170 * t225 - t206;
t429 = t136 * t422;
t368 = t224 * t231;
t113 = t170 * t230 - t171 * t368;
t347 = qJD(5) * t230;
t319 = t225 * t347;
t281 = t113 - t319;
t351 = qJD(4) * t231;
t323 = t224 * t351;
t421 = t281 - t323;
t342 = qJD(5) - t136;
t138 = t231 * t170 + t225 * t337;
t98 = t138 * t224 + t230 * t422;
t428 = t342 * t98;
t223 = sin(qJ(6));
t229 = cos(qJ(6));
t348 = qJD(5) * t229;
t352 = qJD(4) * t230;
t360 = t229 * t231;
t370 = t223 * t225;
t392 = -t114 * t229 - t171 * t370 + (qJD(6) + t352) * t360 + (-t224 * t348 + (-qJD(6) * t230 - qJD(4)) * t223) * t225;
t361 = t229 * t230;
t174 = t223 * t231 + t225 * t361;
t367 = t225 * t229;
t427 = t174 * qJD(6) + t422 * t367 + (qJD(4) * t359 + t430) * t223;
t100 = t138 * t230 - t224 * t422;
t426 = t100 * t342;
t425 = t224 * t342;
t282 = -t230 * t351 + t114;
t222 = qJ(2) + qJ(3);
t217 = cos(t222);
t233 = cos(qJ(1));
t371 = t217 * t233;
t228 = sin(qJ(1));
t373 = t217 * t228;
t424 = g(1) * t371 + g(2) * t373;
t423 = -g(1) * t233 - g(2) * t228;
t216 = sin(t222);
t358 = t233 * t231;
t363 = t228 * t225;
t162 = t216 * t358 - t363;
t128 = t162 * t224 - t230 * t371;
t316 = t409 * qJD(3);
t336 = qJDD(2) + qJDD(3);
t340 = t226 * qJDD(2);
t157 = -t336 * pkin(4) + (qJD(2) * t316 + t340) * pkin(3);
t402 = pkin(3) * qJD(2);
t330 = t226 * t402;
t180 = -pkin(4) * t337 + t330;
t203 = qJD(3) * t330;
t310 = t409 * qJDD(2);
t156 = pkin(3) * t310 + pkin(5) * t336 - t203;
t214 = -pkin(3) * t232 - pkin(2);
t341 = qJD(1) * qJD(2);
t315 = t227 * t341;
t164 = pkin(3) * t315 + qJDD(1) * t214;
t364 = t226 * t227;
t279 = t337 * t364;
t312 = qJDD(1) * t409;
t338 = t232 * qJDD(1);
t96 = qJD(1) * t279 - t226 * t338 - t227 * t312 - t293 * t337;
t132 = t337 * t176;
t339 = t227 * qJDD(1);
t97 = -qJD(1) * t132 - t226 * t339 + t232 * t312;
t50 = -t96 * pkin(4) - t97 * pkin(5) + t164;
t186 = t214 * qJD(1);
t108 = t171 * pkin(4) - t170 * pkin(5) + t186;
t317 = t409 * qJD(2);
t294 = pkin(3) * t317;
t181 = pkin(5) * t337 + t294;
t84 = t231 * t108 - t181 * t225;
t35 = qJD(4) * t84 + t231 * t156 + t225 * t50;
t85 = t108 * t225 + t181 * t231;
t23 = t230 * (qJD(5) * t85 + t157) - t180 * t349 + t224 * t35;
t263 = t216 * t230 + t217 * t368;
t362 = t228 * t231;
t365 = t225 * t233;
t160 = t216 * t362 + t365;
t372 = t217 * t230;
t264 = -t160 * t224 + t228 * t372;
t254 = -g(1) * t128 + g(2) * t264 + g(3) * t263 - t23;
t95 = qJD(6) + t98;
t311 = t95 ^ 2;
t420 = pkin(6) * t311 - t254;
t125 = t160 * t230 + t224 * t373;
t159 = t216 * t363 - t358;
t419 = t125 * t223 + t159 * t229;
t418 = t125 * t229 - t159 * t223;
t175 = t325 - t364;
t376 = t175 * t225;
t353 = qJD(4) * t225;
t261 = -t132 * t231 - t175 * t353;
t131 = t279 + (-t316 - t317) * t232;
t346 = qJD(5) * t231;
t280 = t175 * t346 - t131;
t45 = -t280 * t224 + (-qJD(5) * t176 + t261) * t230;
t415 = -qJD(6) * t376 + t45;
t414 = t225 * t422;
t413 = t430 * pkin(6);
t120 = pkin(4) * t170 + pkin(5) * t171;
t104 = t120 * t225 - t231 * t330;
t412 = pkin(4) * t347 - t230 * t104 + t224 * t294;
t115 = pkin(3) * t355 + t120;
t408 = pkin(3) * t226;
t333 = qJD(3) * t408;
t296 = t225 * t333;
t411 = -t115 * t231 + t296;
t68 = t180 * t230 + t224 * t85;
t22 = -qJD(5) * t68 - t224 * t157 + t230 * t35;
t60 = qJD(4) * t206 - t170 * t353 + t225 * t336 + t231 * t97;
t94 = -qJDD(4) + t96;
t39 = -qJD(5) * t98 + t224 * t94 + t230 * t60;
t410 = -t100 * t351 - t225 * t39;
t306 = t225 * t97 - t231 * t336;
t61 = qJD(4) * t138 + t306;
t59 = -qJDD(5) + t61;
t66 = t100 * t229 + t223 * t342;
t17 = qJD(6) * t66 + t223 * t39 + t229 * t59;
t40 = (qJD(5) * t138 - t94) * t230 - t422 * t349 + t224 * t60;
t49 = t231 * t50;
t36 = -qJD(4) * t85 - t225 * t156 + t49;
t14 = -t39 * pkin(6) + t36;
t15 = -t59 * pkin(6) + t22;
t51 = -pkin(6) * t100 + t84;
t69 = -t180 * t224 + t230 * t85;
t52 = pkin(6) * t342 + t69;
t276 = t223 * t52 - t229 * t51;
t5 = -t276 * qJD(6) + t223 * t14 + t229 * t15;
t234 = qJD(2) ^ 2;
t406 = pkin(6) * t230;
t207 = g(3) * t216;
t208 = g(3) * t217;
t405 = g(3) * t231;
t64 = t100 * t223 - t229 * t342;
t404 = t64 * t95;
t403 = t66 * t95;
t344 = qJD(6) * t229;
t345 = qJD(6) * t223;
t16 = -t100 * t345 - t223 * t59 + t229 * t39 + t342 * t344;
t401 = t16 * t223;
t38 = qJDD(6) + t40;
t400 = t223 * t38;
t398 = t225 * t94;
t397 = t229 * t38;
t305 = t229 * t95;
t396 = t39 * t224;
t395 = t59 * t224;
t394 = t59 * t230;
t393 = t60 * t225;
t324 = t224 * t353;
t390 = -t224 * t104 - t230 * t294 + pkin(4) * t349 + (t230 * t346 - t324) * pkin(5);
t388 = t100 * t230;
t386 = t132 * t225;
t384 = t342 * t230;
t383 = t136 * t230;
t380 = t422 * t170;
t379 = t170 * t171;
t378 = t171 * t180;
t377 = t171 * t225;
t375 = t175 * t231;
t369 = t224 * t225;
t366 = t225 * t230;
t103 = t231 * t120 + t225 * t330;
t357 = t224 * pkin(4) + pkin(5) * t359;
t220 = t227 ^ 2;
t356 = -t232 ^ 2 + t220;
t354 = qJD(4) * t422;
t350 = qJD(5) * t223;
t335 = t409 * pkin(3);
t334 = t227 * t402;
t332 = pkin(6) * t353;
t74 = -pkin(4) * t131 + pkin(5) * t132 + t334;
t331 = t74 * t369;
t329 = t217 * t370;
t328 = t217 * t367;
t327 = t217 * t365;
t326 = -pkin(5) - t406;
t213 = t335 + pkin(5);
t314 = -t213 - t406;
t304 = -0.2e1 * pkin(2) * t341;
t212 = -pkin(4) + t408;
t301 = -t212 * t224 + t213 * t359;
t299 = t231 * t422;
t298 = qJD(4) * t213 + t115;
t297 = t226 * t337;
t295 = pkin(3) * t316;
t165 = t314 * t225;
t243 = -qJD(5) * t212 - t213 * t353 - t231 * t333;
t252 = t213 * t346 + t295;
t236 = -t224 * t252 + t230 * t243;
t292 = -qJD(6) * t165 + (pkin(6) * t171 + t115 * t230) * t225 - t236 + t332;
t291 = t157 * t225 + t85 * t170 + t180 * t351;
t161 = t216 * t365 + t362;
t289 = -g(1) * t161 - g(2) * t159;
t288 = -g(1) * t162 - g(2) * t160;
t286 = g(1) * t228 - g(2) * t233;
t219 = t231 * pkin(6);
t139 = t219 + t301;
t285 = qJD(6) * t139 - t314 * t351 - t411 + t413;
t178 = t326 * t225;
t255 = -t224 * t346 - t225 * t352;
t284 = -pkin(5) * t255 + pkin(6) * t377 - qJD(6) * t178 + t332 - t412;
t169 = t219 + t357;
t283 = qJD(6) * t169 - t326 * t351 + t103 + t413;
t121 = pkin(4) * t176 - pkin(5) * t175 + t214;
t278 = -pkin(6) * t175 + t121 * t230;
t30 = t223 * t51 + t229 * t52;
t119 = t175 * t359 - t176 * t224;
t71 = -pkin(6) * t119 + t121 * t231;
t89 = t278 * t225;
t275 = -t223 * t89 + t229 * t71;
t274 = t223 * t71 + t229 * t89;
t273 = t213 * t94 + t378;
t272 = t298 * t231;
t271 = -t186 * t170 + t207 + t424;
t270 = t225 * t40 + t351 * t98;
t269 = -t344 * t95 - t400;
t268 = -t345 * t95 + t397;
t267 = -qJD(4) * t108 - t156 + t208;
t266 = -t342 * t347 + t395;
t265 = -t342 * t349 - t394;
t155 = -t216 * t224 + t217 * t359;
t262 = t175 * t351 - t386;
t235 = qJD(1) ^ 2;
t259 = pkin(2) * t235 - t423;
t257 = pkin(6) * t38;
t256 = 0.2e1 * qJDD(1) * pkin(2) + t286;
t253 = t208 * t225 + t289;
t250 = qJD(4) * t175 * t180 - t121 * t94 + t422 * t74;
t249 = t253 + t36;
t248 = -t121 * t354 - t132 * t180 + t157 * t175;
t247 = t217 * t423 - t207;
t246 = qJD(6) * t119 + t262;
t245 = -t84 * t170 + t180 * t353 + t216 * t405 + (-t157 + t424) * t231;
t244 = t217 * t405 + (-pkin(6) * t138 + t230 * t84) * t95 + t288;
t6 = -qJD(6) * t30 + t229 * t14 - t223 * t15;
t141 = t155 * t228;
t143 = t155 * t233;
t153 = -t216 * t359 - t217 * t224;
t242 = -g(1) * (t143 * t223 + t229 * t327) - g(2) * (t141 * t223 + t228 * t328) - g(3) * (-t153 * t223 + t216 * t367) + t23 * t174 + t392 * t68;
t241 = pkin(6) * qJD(5) * t95 + t253;
t240 = t186 * t171 + t216 * t423 + t203 + t208;
t239 = g(1) * t143 + g(2) * t141 - g(3) * t153 - t23 * t231 + t36 * t369 + t68 * t377 - t421 * t84;
t238 = -g(3) * (t216 * t368 - t372) - t22 * t231 + t69 * t353 + t36 * t366 - t282 * t84 + t423 * t263;
t173 = t223 * t366 - t360;
t237 = -g(1) * (-t143 * t229 + t223 * t327) - g(2) * (-t141 * t229 + t228 * t329) - g(3) * (t153 * t229 + t216 * t370) + t23 * t173 + t6 * t369 + t427 * t68 + t421 * t276;
t177 = -pkin(4) * t230 + pkin(5) * t368;
t147 = t212 * t230 + t213 * t368;
t129 = -t162 * t230 - t224 * t371;
t118 = t175 * t368 + t176 * t230;
t102 = t170 ^ 2 - t171 ^ 2;
t92 = t129 * t229 + t161 * t223;
t91 = -t129 * t223 + t161 * t229;
t90 = t224 * t243 + t230 * t252;
t88 = t119 * t229 - t175 * t370;
t87 = t119 * t223 + t175 * t367;
t82 = -t136 * t361 - t138 * t223;
t81 = t229 * t138 - t223 * t383;
t73 = t171 * t337 + t97;
t72 = t170 * t337 + t96;
t58 = pkin(6) * t383 - t85;
t46 = -t132 * t368 - t175 * t324 - t176 * t349 + t230 * t280;
t44 = -t138 * t170 + t299 * t422 - t398;
t43 = t136 * t170 - t231 * t94 - t414 * t422;
t42 = t138 * t299 + t393;
t41 = -t59 * t231 - t342 * t414;
t34 = t278 * t351 + (pkin(6) * t132 - t121 * t349 + t230 * t74) * t225;
t26 = -pkin(6) * t45 - t121 * t353 + t231 * t74;
t25 = t223 * t415 + t229 * t246;
t24 = -t246 * t223 + t229 * t415;
t18 = (t60 - t429) * t231 + (-t138 * t422 - t61) * t225;
t13 = t39 * t366 + (-t282 - t320) * t100;
t11 = t369 * t38 - t421 * t95;
t10 = t231 * t39 - t282 * t342 + (-t100 * t422 + t265) * t225;
t9 = -t231 * t40 - (-t113 + t323) * t342 + (t422 * t98 + t266) * t225;
t8 = t16 * t174 + t392 * t66;
t7 = t100 * t113 + t114 * t98 + (-t100 * t224 - t230 * t98) * t351 + (-t396 - t230 * t40 + (t224 * t98 - t388) * qJD(5)) * t225;
t3 = -t17 * t369 - t173 * t38 + t421 * t64 - t427 * t95;
t2 = t16 * t369 + t174 * t38 + t392 * t95 - t421 * t66;
t1 = -t16 * t173 - t17 * t174 - t392 * t64 - t427 * t66;
t4 = [qJDD(1), t286, -t423, qJDD(1) * t220 + 0.2e1 * t232 * t315, 0.2e1 * t227 * t338 - 0.2e1 * t341 * t356, qJDD(2) * t227 + t232 * t234, qJDD(2) * t232 - t227 * t234, 0, t227 * t304 + t232 * t256, -t227 * t256 + t232 * t304, -t132 * t170 + t175 * t97, t131 * t170 + t132 * t171 + t175 * t96 - t176 * t97, -t132 * t337 + t175 * t336, t131 * t337 - t176 * t336, 0, -t131 * t186 + t164 * t176 + t171 * t334 - t214 * t96 - t216 * t286, -t132 * t186 + t164 * t175 + t170 * t334 + t214 * t97 - t217 * t286, t138 * t261 + t375 * t60 -(-t136 * t231 - t138 * t225) * t132 + (-t393 - t231 * t61 + (t136 * t225 - t138 * t231) * qJD(4)) * t175, -t131 * t138 + t176 * t60 + t261 * t422 - t375 * t94, t131 * t136 - t176 * t61 - t262 * t422 + t376 * t94, -t131 * t422 - t176 * t94, -g(1) * t160 + g(2) * t162 - t131 * t84 + t176 * t36 + t225 * t248 + t231 * t250, g(1) * t159 - g(2) * t161 + t131 * t85 - t176 * t35 - t225 * t250 + t231 * t248, t100 * t45 + t119 * t39, -t100 * t46 - t118 * t39 - t119 * t40 - t45 * t98, -t100 * t262 - t59 * t119 + t342 * t45 - t376 * t39, t118 * t59 + t175 * t270 - t342 * t46 - t386 * t98, -t262 * t342 + t376 * t59, -g(1) * t125 - g(2) * t129 + t118 * t36 + t46 * t84 + (t121 * t40 + t74 * t98 + (-t121 * t425 + t175 * t68) * qJD(4)) * t231 + (-t74 * t425 - t132 * t68 + t175 * t23 + (-qJD(4) * t98 + t266) * t121) * t225, t36 * t119 + t84 * t45 - g(1) * t264 - g(2) * t128 + (t74 * t100 + t121 * t39 + (-t121 * t384 + t175 * t69) * qJD(4)) * t231 + (-t74 * t384 - t69 * t132 + t22 * t175 + (-qJD(4) * t100 - t265) * t121) * t225, t16 * t88 + t24 * t66, -t16 * t87 - t17 * t88 - t24 * t64 - t25 * t66, t118 * t16 + t24 * t95 + t38 * t88 + t46 * t66, -t118 * t17 - t25 * t95 - t38 * t87 - t46 * t64, t118 * t38 + t46 * t95 (-qJD(6) * t274 - t223 * t34 + t229 * t26) * t95 + t275 * t38 + t6 * t118 - t276 * t46 + t64 * t331 + t23 * t87 + t68 * t25 - g(1) * t418 - g(2) * t92 + (t64 * t319 + (t17 * t225 + t351 * t64) * t224) * t121 -(qJD(6) * t275 + t223 * t26 + t229 * t34) * t95 - t274 * t38 - t5 * t118 - t30 * t46 + t66 * t331 + t23 * t88 + t68 * t24 + g(1) * t419 - g(2) * t91 + (t66 * t319 + (t16 * t225 + t351 * t66) * t224) * t121; 0, 0, 0, -t227 * t235 * t232, t356 * t235, t339, t338, qJDD(2), -g(3) * t232 + t227 * t259, g(3) * t227 + t232 * t259, t379, t102, t73, t72, t336 (-t171 * t355 + (-0.2e1 * qJDD(2) - qJDD(3)) * t226 + (-0.2e1 * t317 - t316) * qJD(3)) * pkin(3) + t271 (qJD(3) * t297 - t170 * t355 - t336 * t409 - t310) * pkin(3) + t240, t42, t18, t44, t43, -t380, t136 * t295 + t212 * t61 + t273 * t225 + (-t272 + t296) * t422 + t245, t138 * t295 + t212 * t60 + (t333 * t422 + t273) * t231 + (t298 * t422 + t247) * t225 + t291, t13, t7, t10, t9, t41, -t342 * t90 + t147 * t59 - t98 * t272 + (qJD(4) * t68 + t115 * t425 - t213 * t40 + t333 * t98) * t225 + t239, t301 * t59 - t320 * t84 + t377 * t69 + t238 + t410 * t213 - (-t115 * t366 + t236) * t342 + t411 * t100, t8, t1, t2, t3, t11 (t223 * t292 - t229 * t285) * t95 + (-t115 * t369 + t90) * t64 + (-t139 * t223 + t165 * t229) * t38 + t147 * t17 + t237 -(t139 * t229 + t165 * t223) * t38 + t90 * t66 + t147 * t16 + (t223 * t285 + t229 * t292) * t95 + t281 * t30 + (-t30 * t351 + (-t115 * t66 - t5) * t225) * t224 + t242; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t379, t102, t73, t72, t336, -pkin(3) * t340 + t234 * t335 + t271 (-qJD(2) * t297 - t310) * pkin(3) + t240, t42, t18, t44, t43, -t380, -t136 * t294 + t180 * t377 - pkin(4) * t61 - t103 * t422 + (-t351 * t422 + t398) * pkin(5) + t245, -t138 * t294 - pkin(4) * t60 + t104 * t422 + (pkin(5) * t94 + t378) * t231 + (pkin(5) * t354 + t247) * t225 + t291, t13, t7, t10, t9, t41, -pkin(5) * t270 - t103 * t98 + t177 * t59 - t342 * t390 + t353 * t68 + t239, t357 * t59 - t103 * t100 + (t69 * t171 - t349 * t84) * t225 - t412 * t342 + (-t255 * t342 + t410) * pkin(5) + t238, t8, t1, t2, t3, t11, t390 * t64 + (t223 * t284 - t229 * t283) * t95 + (-t169 * t223 + t178 * t229) * t38 + t177 * t17 + t237 -(t169 * t229 + t178 * t223) * t38 - t5 * t369 + t177 * t16 + (t223 * t283 + t229 * t284) * t95 + t390 * t66 + t421 * t30 + t242; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t138 * t136, -t136 ^ 2 + t138 ^ 2, t60 + t429, -t306 + (-qJD(4) + t422) * t138, -t94, -t138 * t180 - t181 * t351 + t225 * t267 + t422 * t85 + t289 + t49, t136 * t180 + t422 * t84 + (qJD(4) * t181 - t50) * t225 + t267 * t231 + t288, -t342 * t388 - t396 (-t39 + t428) * t230 + (t40 + t426) * t224, t138 * t100 - t342 * t384 + t395, -t138 * t98 + t342 * t425 + t394, t342 * t138, -t138 * t68 + t230 * t249 + t85 * t98, t100 * t85 - t138 * t69 - t224 * t249, -t16 * t229 * t224 + (t224 * t345 - t229 * t347 - t82) * t66, t64 * t82 + t66 * t81 + (t223 * t66 + t229 * t64) * t347 + (t401 + t17 * t229 + (-t223 * t64 + t229 * t66) * qJD(6)) * t224, -t82 * t95 + (-t348 * t95 + t16) * t230 + (-t342 * t66 - t268) * t224, t81 * t95 + (t350 * t95 - t17) * t230 + (t342 * t64 - t269) * t224, t38 * t230 - t425 * t95, -t58 * t305 - t68 * t81 + t244 * t223 + (t229 * t241 - t350 * t68 + t6) * t230 + (pkin(6) * t268 - t23 * t223 + t276 * t342 - t344 * t68 - t84 * t64) * t224, t223 * t58 * t95 - t68 * t82 + t244 * t229 + (-t223 * t241 - t348 * t68 - t5) * t230 + (pkin(6) * t269 - t23 * t229 + t30 * t342 + t345 * t68 - t84 * t66) * t224; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t100 * t98, t100 ^ 2 - t98 ^ 2, t39 + t428, -t40 + t426, -t59, -t100 * t84 + t342 * t69 + t254, g(1) * t129 - g(2) * t125 + g(3) * t155 - t342 * t68 + t84 * t98 - t22, t305 * t66 + t401 (t16 - t404) * t229 + (-t17 - t403) * t223, -t66 * t100 + t305 * t95 + t400, t64 * t100 - t223 * t311 + t397, -t95 * t100, t276 * t100 - t257 * t223 - t229 * t420 - t69 * t64, t30 * t100 + t223 * t420 - t257 * t229 - t69 * t66; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t66 * t64, -t64 ^ 2 + t66 ^ 2, t16 + t404, -t17 + t403, t38, t30 * t95 - t68 * t66 - g(1) * t91 - g(2) * t419 - g(3) * (-t155 * t223 - t328) + t6, -t276 * t95 + t68 * t64 + g(1) * t92 - g(2) * t418 - g(3) * (-t155 * t229 + t329) - t5;];
tau_reg  = t4;
